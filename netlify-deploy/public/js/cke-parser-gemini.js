/**
 * Uproszczony parser CKE u≈ºywajƒÖcy tylko Gemini API
 * Przesy≈Ça ca≈Çy tekst arkusza do AI i otrzymuje sformatowane zadania
 */

class CKEParserGemini {
    constructor() {
        this.initialized = false;
        this.apiClient = null;
    }

    /**
     * Inicjalizacja parsera
     */
    async initialize() {
        if (this.initialized) return;
        
        // U≈ºyj globalnego APIClient
        if (window.APIClient) {
            this.apiClient = window.APIClient;
            this.initialized = true;
            console.log('‚úÖ CKE Parser Gemini zainicjalizowany');
        } else {
            console.error('‚ùå Brak APIClient - parser nie bƒôdzie dzia≈Ça≈Ç');
            throw new Error('APIClient nie jest dostƒôpny');
        }
    }

    /**
     * Parsowanie arkusza CKE u≈ºywajƒÖc tylko Gemini API
     */
    async parseWithGemini(examPdfFile, answerKeyPdfFile = null) {
        if (!this.initialized) {
            await this.initialize();
        }

        if (!this.apiClient) {
            throw new Error('Parser nie zosta≈Ç prawid≈Çowo zainicjalizowany');
        }

        try {
            // 1. WyciƒÖgnij tekst z PDF-√≥w
            console.log('üìÑ Ekstraktujƒô tekst z arkusza...');
            const examText = await this.extractTextFromPDF(examPdfFile);
            
            let answerText = '';
            if (answerKeyPdfFile) {
                console.log('üìã Ekstraktujƒô tekst z klucza odpowiedzi...');
                answerText = await this.extractTextFromPDF(answerKeyPdfFile);
            }

            // 2. Przygotuj prompt dla Gemini
            const prompt = this.createParsingPrompt(examText, answerText);

            // 3. Wy≈õlij do Gemini i otrzymaj sparsowane zadania
            console.log('ü§ñ Analizujƒô arkusz za pomocƒÖ Gemini AI...');
            const response = await this.apiClient.generateContent(prompt, {
                temperature: 0.1, // Niska temperatura dla dok≈Çadno≈õci
                maxTokens: 4096
            });

            // 4. Przetw√≥rz odpowied≈∫
            const parsedData = this.processGeminiResponse(response);

            // 5. Waliduj i zwr√≥ƒá wyniki
            const validatedTasks = this.validateTasks(parsedData.tasks);

            return {
                success: true,
                tasks: validatedTasks,
                metadata: parsedData.metadata || {}
            };

        } catch (error) {
            console.error('B≈ÇƒÖd parsowania przez Gemini:', error);
            return {
                success: false,
                error: error.message,
                tasks: []
            };
        }
    }

    /**
     * WyciƒÖga tekst z PDF u≈ºywajƒÖc pdf.js
     */
    async extractTextFromPDF(pdfFile) {
        if (typeof pdfjsLib === 'undefined') {
            throw new Error('Biblioteka pdf.js nie jest za≈Çadowana');
        }

        const arrayBuffer = await pdfFile.arrayBuffer();
        const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        let fullText = '';

        for (let i = 1; i <= pdf.numPages; i++) {
            const page = await pdf.getPage(i);
            const textContent = await page.getTextContent();
            const pageText = textContent.items.map(item => item.str).join(' ');
            fullText += `\n\n--- STRONA ${i} ---\n${pageText}`;
        }

        return fullText;
    }

    /**
     * Tworzy prompt do parsowania arkusza
     */
    createParsingPrompt(examText, answerText) {
        return `Jeste≈õ ekspertem w analizie arkuszy egzaminacyjnych CKE. Przeanalizuj poni≈ºszy arkusz egzaminacyjny i wyodrƒôbnij wszystkie zadania.

ARKUSZ EGZAMINACYJNY:
${examText}

${answerText ? `KLUCZ ODPOWIEDZI:\n${answerText}` : ''}

Zwr√≥ƒá dane w formacie JSON zawierajƒÖcym:

{
  "metadata": {
    "subject": "przedmiot (matematyka/polski/angielski/itp)",
    "examType": "typ egzaminu (√≥smoklasisty/matura podstawowa/matura rozszerzona)",
    "year": "rok egzaminu",
    "totalPoints": liczba_punkt√≥w
  },
  "tasks": [
    {
      "id": "unikalny_identyfikator",
      "tresc": "pe≈Çna tre≈õƒá zadania",
      "typ": "zamkniete" lub "otwarte",
      "punkty": liczba_punkt√≥w,
      "odpowiedzi": ["A...", "B...", "C...", "D..."] // dla zada≈Ñ zamkniƒôtych,
      "poprawna": "poprawna odpowied≈∫",
      "kategoria": "kategoria zadania",
      "podkategoria": "podkategoria",
      "poziom": "podstawowy/≈õredni/zaawansowany",
      "wskazowki": ["wskaz√≥wka 1", "wskaz√≥wka 2"] // opcjonalne
    }
  ]
}

WA≈ªNE ZASADY:
1. Zachowaj DOK≈ÅADNƒÑ tre≈õƒá ka≈ºdego zadania
2. Dla zada≈Ñ zamkniƒôtych wylistuj WSZYSTKIE opcje odpowiedzi
3. Je≈õli jest klucz odpowiedzi, u≈ºyj go do okre≈õlenia poprawnych odpowiedzi
4. Kategoryzuj zadania wed≈Çug tematyki
5. Okre≈õl poziom trudno≈õci na podstawie z≈Ço≈ºono≈õci
6. Dla zada≈Ñ matematycznych zachowaj formu≈Çy i wyra≈ºenia
7. Zwr√≥ƒá TYLKO poprawny JSON, bez dodatkowych komentarzy`;
    }

    /**
     * Przetwarza odpowied≈∫ z Gemini
     */
    processGeminiResponse(response) {
        try {
            // WyciƒÖgnij JSON z odpowiedzi
            const responseText = typeof response === 'string' ? response : response.text;
            
            // Znajd≈∫ JSON w odpowiedzi (mo≈ºe byƒá otoczony tekstem)
            const jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                throw new Error('Nie znaleziono poprawnego JSON w odpowiedzi');
            }

            const parsed = JSON.parse(jsonMatch[0]);
            
            // Upewnij siƒô ≈ºe mamy wymagane pola
            if (!parsed.tasks || !Array.isArray(parsed.tasks)) {
                throw new Error('Brak tablicy zada≈Ñ w odpowiedzi');
            }

            return parsed;
        } catch (error) {
            console.error('B≈ÇƒÖd przetwarzania odpowiedzi Gemini:', error);
            throw new Error('Nie uda≈Ço siƒô przetworzyƒá odpowiedzi AI: ' + error.message);
        }
    }

    /**
     * Waliduje i poprawia zadania
     */
    validateTasks(tasks) {
        return tasks.map((task, index) => {
            // Generuj ID je≈õli brak
            if (!task.id) {
                task.id = `cke_${Date.now()}_${index}`;
            }

            // Domy≈õlne warto≈õci
            task.typ = task.typ || 'otwarte';
            task.punkty = task.punkty || 1;
            task.kategoria = task.kategoria || 'Nieprzypisane';
            task.poziom = task.poziom || '≈õredni';

            // Dla zada≈Ñ zamkniƒôtych sprawd≈∫ odpowiedzi
            if (task.typ === 'zamkniete') {
                if (!task.odpowiedzi || task.odpowiedzi.length < 2) {
                    console.warn(`Zadanie ${task.id} ma za ma≈Ço opcji odpowiedzi`);
                    task.typ = 'otwarte'; // Zmie≈Ñ na otwarte je≈õli brak opcji
                }
            }

            // Upewnij siƒô ≈ºe tre≈õƒá istnieje
            if (!task.tresc || task.tresc.trim() === '') {
                task.tresc = `Zadanie ${index + 1}`;
            }

            return task;
        });
    }

    /**
     * Pomocnicza metoda do testowania parsera
     */
    async testParser(examText, answerText = '') {
        const prompt = this.createParsingPrompt(examText, answerText);
        console.log('Test prompt:', prompt);
        
        try {
            const response = await this.apiClient.generateContent(prompt);
            const result = this.processGeminiResponse(response);
            console.log('Test result:', result);
            return result;
        } catch (error) {
            console.error('Test failed:', error);
            throw error;
        }
    }
}

// Eksportuj jako globalnƒÖ
window.CKEParserGemini = CKEParserGemini;