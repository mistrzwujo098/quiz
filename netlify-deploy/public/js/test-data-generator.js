// Generator danych testowych dla QuizMaster
class TestDataGenerator {
    constructor() {
        this.studentNames = [
            'Anna Kowalska', 'Piotr Nowak', 'Katarzyna Wi≈õniewska', 'Micha≈Ç W√≥jcik',
            'Magdalena Kowalczyk', 'Jakub Kami≈Ñski', 'Natalia Lewandowska', 'Mateusz Zieli≈Ñski',
            'Aleksandra Szyma≈Ñska', 'Bartosz Wo≈∫niak', 'Julia DƒÖbrowska', 'Szymon Koz≈Çowski',
            'Wiktoria Jankowska', 'Filip Mazur', 'Zuzanna Krawczyk', 'Dominik Piotrowski',
            'Oliwia Grabowska', 'Kacper Paw≈Çowski', 'Maja Michalska', 'Adrian Adamczyk'
        ];
        
        this.categories = ['Egzamin √≥smoklasisty', 'Matura podstawowa', 'Matura rozszerzona'];
        this.subjects = ['Matematyka', 'Fizyka', 'Chemia', 'Biologia', 'Geografia'];
        this.topics = {
            'Matematyka': ['Geometria', 'Algebra', 'Procenty', 'Funkcje', 'Statystyka'],
            'Fizyka': ['Mechanika', 'Termodynamika', 'Elektryczno≈õƒá', 'Optyka', 'Fale'],
            'Chemia': ['Reakcje chemiczne', 'Uk≈Çad okresowy', 'ZwiƒÖzki organiczne', 'Kwasy i zasady'],
            'Biologia': ['Kom√≥rka', 'Genetyka', 'Ekologia', 'Anatomia cz≈Çowieka'],
            'Geografia': ['Klimat', 'Ukszta≈Çtowanie terenu', 'Gospodarka', 'Mapy']
        };
    }

    // Generuj dane testowe
    generateTestData() {
        console.log('üéØ Generowanie danych testowych...');
        
        // 1. Utw√≥rz u≈ºytkownik√≥w
        this.createTestUsers();
        
        // 2. Utw√≥rz grupy
        this.createTestGroups();
        
        // 3. Generuj wyniki egzamin√≥w
        this.generateExamResults();
        
        // 4. Generuj osiƒÖgniƒôcia
        this.generateAchievements();
        
        // 5. Generuj harmonogram
        this.generateSchedule();
        
        // 6. Generuj wyzwania i ranking
        this.generateCompetitionData();
        
        // 7. Generuj szablony arkuszy
        this.generateExamTemplates();
        
        // 8. Generuj komentarze nauczyciela
        this.generateTeacherComments();
        
        console.log('‚úÖ Dane testowe wygenerowane pomy≈õlnie!');
    }

    // 1. Tworzenie u≈ºytkownik√≥w
    createTestUsers() {
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        
        // Dodaj uczni√≥w je≈õli nie istniejƒÖ
        this.studentNames.forEach((name, index) => {
            const username = name.toLowerCase().replace(' ', '.');
            const userId = 1000 + index;
            
            if (!users.find(u => u.id === userId || u.username === username)) {
                users.push({
                    id: userId,
                    userId: userId, // dla kompatybilno≈õci wstecznej
                    username: username,
                    password: CryptoJS.SHA256('haslo123').toString(),
                    role: 'student',
                    category: this.categories[index % 3],
                    createdAt: new Date()
                });
            }
        });
        
        // Dodaj nauczycieli testowych
        const testTeachers = [
            { username: 'jan.kowalski', name: 'Jan Kowalski', userId: 2001 },
            { username: 'maria.nowak', name: 'Maria Nowak', userId: 2002 }
        ];
        
        testTeachers.forEach(teacher => {
            if (!users.find(u => u.id === teacher.userId || u.username === teacher.username)) {
                users.push({
                    id: teacher.userId,
                    userId: teacher.userId, // dla kompatybilno≈õci wstecznej
                    username: teacher.username,
                    password: CryptoJS.SHA256('nauczyciel123').toString(),
                    role: 'teacher',
                    createdAt: new Date()
                });
            }
        });
        
        localStorage.setItem('users', JSON.stringify(users));
        console.log(`‚úì Utworzono ${this.studentNames.length} uczni√≥w i ${testTeachers.length} nauczycieli`);
    }

    // 2. Tworzenie grup
    createTestGroups() {
        const groups = [
            { id: 1, name: 'Klasa 8A', students: [1000, 1001, 1002, 1003, 1004, 1005] },
            { id: 2, name: 'Klasa 8B', students: [1006, 1007, 1008, 1009, 1010, 1011] },
            { id: 3, name: 'Maturzy≈õci podstawowi', students: [1012, 1013, 1014, 1015] },
            { id: 4, name: 'Maturzy≈õci rozszerzeni', students: [1016, 1017, 1018, 1019] }
        ];
        
        localStorage.setItem('studentGroups', JSON.stringify(groups));
        console.log(`‚úì Utworzono ${groups.length} grup uczni√≥w`);
    }

    // 3. Generowanie wynik√≥w egzamin√≥w
    generateExamResults() {
        const results = [];
        const tasks = JSON.parse(localStorage.getItem('zadaniaDB') || '[]');
        
        // Dla ka≈ºdego ucznia generuj 5-10 wynik√≥w
        for (let i = 0; i < 20; i++) {
            const studentId = 1000 + i;
            const studentName = this.studentNames[i];
            const resultsCount = 5 + Math.floor(Math.random() * 6);
            
            for (let j = 0; j < resultsCount; j++) {
                const date = new Date();
                date.setDate(date.getDate() - Math.floor(Math.random() * 30)); // Ostatnie 30 dni
                
                // Losuj zadania
                const questionsCount = 10 + Math.floor(Math.random() * 11);
                const selectedTasks = this.selectRandomTasks(tasks, questionsCount);
                const answers = {};
                let correct = 0;
                
                selectedTasks.forEach(task => {
                    // Symuluj odpowiedzi (70% szans na poprawnƒÖ)
                    const isCorrect = Math.random() < 0.7;
                    if (task.typ === 'zamkniete' && task.odpowiedzi) {
                        answers[task.id] = isCorrect ? task.poprawna : task.odpowiedzi[Math.floor(Math.random() * task.odpowiedzi.length)];
                        if (isCorrect) correct++;
                    }
                });
                
                results.push({
                    examId: Date.now() + Math.random(),
                    examTitle: `Test z ${this.subjects[j % 5]}`,
                    studentName: studentName,
                    studentId: studentId,
                    category: this.categories[i % 3],
                    correctAnswers: correct,
                    totalQuestions: questionsCount,
                    earnedPoints: correct,
                    totalPoints: questionsCount,
                    percentage: Math.round((correct / questionsCount) * 100),
                    completedAt: date.toISOString(),
                    timeSpent: 600 + Math.floor(Math.random() * 1800), // 10-40 minut
                    answers: answers,
                    questions: selectedTasks,
                    subject: this.subjects[j % 5]
                });
            }
        }
        
        // Sortuj wed≈Çug daty
        results.sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt));
        
        localStorage.setItem('examResults', JSON.stringify(results));
        console.log(`‚úì Wygenerowano ${results.length} wynik√≥w egzamin√≥w`);
    }

    // 4. Generowanie osiƒÖgniƒôƒá
    generateAchievements() {
        // Dla ka≈ºdego ucznia wygeneruj postƒôpy
        for (let i = 0; i < 20; i++) {
            const studentId = 1000 + i;
            const progress = {
                totalTasks: 20 + Math.floor(Math.random() * 80),
                perfectScores: Math.floor(Math.random() * 10),
                averageScore: 60 + Math.floor(Math.random() * 30),
                dailyStreak: Math.floor(Math.random() * 15),
                lastActivityDate: new Date().toDateString(),
                subjectTasks: {
                    'Matematyka': 5 + Math.floor(Math.random() * 20),
                    'Fizyka': 5 + Math.floor(Math.random() * 20),
                    'Chemia': 5 + Math.floor(Math.random() * 15)
                },
                tasksWithoutHints: Math.floor(Math.random() * 15),
                weeklyScores: [],
                totalPoints: 100 + Math.floor(Math.random() * 400)
            };
            
            localStorage.setItem(`userProgress_${studentId}`, JSON.stringify(progress));
        }
        
        console.log('‚úì Wygenerowano postƒôpy i osiƒÖgniƒôcia dla uczni√≥w');
    }

    // 5. Generowanie harmonogramu
    generateSchedule() {
        const scheduler = new ExamScheduler();
        const today = new Date();
        
        // Generuj wydarzenia na najbli≈ºsze 30 dni
        const events = [
            { title: 'Sprawdzian z matematyki - geometria', type: 'exam', daysFromNow: 3, subject: 'Matematyka' },
            { title: 'Kartk√≥wka z fizyki - ruch', type: 'quiz', daysFromNow: 5, subject: 'Fizyka' },
            { title: 'Egzamin pr√≥bny', type: 'exam', daysFromNow: 7, subject: 'Matematyka' },
            { title: 'Test z chemii', type: 'exam', daysFromNow: 10, subject: 'Chemia' },
            { title: 'Zadanie domowe - funkcje', type: 'homework', daysFromNow: 2, subject: 'Matematyka' },
            { title: 'Projekt z biologii', type: 'homework', daysFromNow: 14, subject: 'Biologia' }
        ];
        
        events.forEach(event => {
            const date = new Date(today);
            date.setDate(date.getDate() + event.daysFromNow);
            
            scheduler.addEvent({
                title: event.title,
                type: event.type,
                date: date.toISOString().split('T')[0],
                time: '09:00',
                duration: event.type === 'exam' ? 90 : 45,
                subject: event.subject,
                targetGroups: [1, 2], // Klasy 8A i 8B
                createdBy: 'paulinaodmatematyki',
                reminders: [24, 48] // Przypomnienia 24h i 48h przed
            });
        });
        
        console.log(`‚úì Wygenerowano ${events.length} wydarze≈Ñ w harmonogramie`);
    }

    // 6. Generowanie danych rywalizacji
    generateCompetitionData() {
        const competitionSystem = new CompetitionSystem();
        
        // Generuj punkty rankingowe
        const examResults = JSON.parse(localStorage.getItem('examResults') || '[]');
        examResults.forEach(result => {
            competitionSystem.updateLeaderboard(
                result.studentId,
                result.studentName,
                result
            );
        });
        
        // Generuj wyzwania
        const challenges = [
            { challenger: 1000, opponent: 1001, subject: 'Matematyka' },
            { challenger: 1002, opponent: 1003, subject: 'Fizyka' },
            { challenger: 1004, opponent: 1005, subject: 'Chemia' }
        ];
        
        challenges.forEach(ch => {
            competitionSystem.createChallenge({
                challengerId: ch.challenger,
                challengerName: this.studentNames[ch.challenger - 1000],
                opponentId: ch.opponent,
                opponentName: this.studentNames[ch.opponent - 1000],
                subject: ch.subject,
                questionsCount: 10,
                timeLimit: 15
            });
        });
        
        // Generuj turniej
        competitionSystem.createTournament({
            name: 'Turniej Matematyczny',
            description: 'Miesiƒôczny turniej z matematyki dla klas 8',
            subject: 'Matematyka',
            maxParticipants: 16,
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            createdBy: 'paulinaodmatematyki'
        });
        
        console.log('‚úì Wygenerowano dane rywalizacji i ranking√≥w');
    }

    // 7. Generowanie szablon√≥w arkuszy
    generateExamTemplates() {
        const templatesBank = new ExamTemplatesBank();
        const tasks = JSON.parse(localStorage.getItem('zadaniaDB') || '[]');
        
        const templates = [
            {
                name: 'Test geometria podstawowa',
                description: 'Podstawowe zadania z geometrii dla klasy 8',
                subject: 'Matematyka',
                level: 'podstawowy',
                tags: ['geometria', 'klasa8', 'podstawy']
            },
            {
                name: 'Sprawdzian funkcje',
                description: 'Funkcje liniowe i kwadratowe',
                subject: 'Matematyka',
                level: '≈õredni',
                tags: ['funkcje', 'algebra', 'matura']
            },
            {
                name: 'Test mechanika',
                description: 'Ruch, si≈Çy, energia',
                subject: 'Fizyka',
                level: 'podstawowy',
                tags: ['mechanika', 'fizyka', 'podstawy']
            }
        ];
        
        templates.forEach(template => {
            const selectedTasks = this.selectRandomTasks(tasks, 15);
            templatesBank.saveAsTemplate(
                {
                    title: template.name,
                    timeLimit: 45,
                    questions: selectedTasks,
                    targetCategories: ['Egzamin √≥smoklasisty', 'Matura podstawowa']
                },
                {
                    ...template,
                    createdBy: 'paulinaodmatematyki'
                }
            );
        });
        
        // Udostƒôpnij pierwszy szablon
        const savedTemplates = templatesBank.loadTemplates();
        if (savedTemplates.length > 0) {
            templatesBank.shareTemplate(savedTemplates[0].id, 'paulinaodmatematyki');
        }
        
        console.log(`‚úì Wygenerowano ${templates.length} szablon√≥w arkuszy`);
    }

    // 8. Generowanie komentarzy nauczyciela
    generateTeacherComments() {
        const comments = {};
        const results = JSON.parse(localStorage.getItem('examResults') || '[]');
        
        const sampleComments = [
            '≈öwietna praca! Widaƒá postƒôpy w rozwiƒÖzywaniu zada≈Ñ.',
            'Zwr√≥ƒá uwagƒô na zadania z geometrii - warto je poƒáwiczyƒá.',
            'Bardzo dobry wynik. Tak trzymaj!',
            'Popracuj nad zadaniami z procent√≥w.',
            'Widaƒá systematycznƒÖ pracƒô. Gratulacje!',
            'Spr√≥buj rozwiƒÖzywaƒá zadania wolniej i dok≈Çadniej.',
            'Dobry wynik, ale mo≈ºna lepiej. ƒÜwicz dalej!',
            'Brawo! Doskonale opanowany materia≈Ç.',
            'Skup siƒô na zadaniach tekstowych.',
            '≈öwietnie radzisz sobie z algebrƒÖ!'
        ];
        
        // Dodaj komentarze do 30% wynik√≥w
        results.slice(0, Math.floor(results.length * 0.3)).forEach((result, index) => {
            const key = `${result.studentId}_${result.examId}_${result.completedAt}`;
            comments[key] = sampleComments[index % sampleComments.length];
        });
        
        localStorage.setItem('examComments', JSON.stringify(comments));
        console.log(`‚úì Wygenerowano ${Object.keys(comments).length} komentarzy nauczyciela`);
    }

    // Pomocnicze funkcje
    selectRandomTasks(tasks, count) {
        const shuffled = [...tasks].sort(() => 0.5 - Math.random());
        return shuffled.slice(0, Math.min(count, tasks.length));
    }

    // Wyczy≈õƒá wszystkie dane testowe
    clearTestData() {
        const keysToRemove = [
            'examResults',
            'studentGroups',
            'examScheduleEvents',
            'competitionLeaderboards',
            'competitionChallenges',
            'competitionTournaments',
            'examTemplates',
            'sharedExamTemplates',
            'examComments'
        ];
        
        // Usu≈Ñ klucze g≈Ç√≥wne
        keysToRemove.forEach(key => localStorage.removeItem(key));
        
        // Usu≈Ñ klucze per u≈ºytkownik
        for (let i = 0; i < 20; i++) {
            const studentId = 1000 + i;
            localStorage.removeItem(`userProgress_${studentId}`);
            localStorage.removeItem(`userAchievements_${studentId}`);
            localStorage.removeItem(`recommendation_progress_${studentId}`);
        }
        
        // Usu≈Ñ testowych u≈ºytkownik√≥w
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const filteredUsers = users.filter(u => u.userId < 1000 || u.userId > 2999);
        localStorage.setItem('users', JSON.stringify(filteredUsers));
        
        console.log('‚úì Dane testowe zosta≈Çy wyczyszczone');
    }
}

// Eksportuj jako globalnƒÖ
window.TestDataGenerator = TestDataGenerator;

// Automatycznie wygeneruj dane przy ≈Çadowaniu
document.addEventListener('DOMContentLoaded', () => {
    const generator = new TestDataGenerator();
    
    // Sprawd≈∫ czy dane testowe ju≈º istniejƒÖ
    const hasTestData = localStorage.getItem('testDataGenerated');
    
    if (!hasTestData) {
        console.log('üöÄ Pierwsz uruchomienie - generowanie danych testowych...');
        generator.generateTestData();
        localStorage.setItem('testDataGenerated', 'true');
    } else {
        console.log('‚ÑπÔ∏è Dane testowe ju≈º istniejƒÖ. U≈ºyj TestDataGenerator.clearTestData() aby wyczy≈õciƒá.');
    }
});